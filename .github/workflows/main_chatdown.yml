# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - chatdown

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Cache NuGet packages
      #   uses: actions/cache@v4
      #   with: 
      #     path: ~/.nuget/packages
      #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/Chatdown.sln') }}

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: "**/packages.lock.json"

      - name: Restore dependencies
        id: restore-dependencies
        run: dotnet restore Chatdown.sln --locked-mode
        continue-on-error: true # Continue even if the restore fails, we will force restore later

      - name: Force Restore dependencies
        run: dotnet restore Chatdown.sln --locked-mode --force-evaluate
        if: steps.restore-dependencies.outcome == 'failure' # Only run if the previous step failed - we might need to reevaluate the dependencies
           # Only run if the previous step failed - we might need to reeavalutate the dependencies

      - name: Warning if restore failed
        run: 'echo "::warning: packages.lock is out of sync with the project files. This slows the build considerably. Please run dotnet restore and commit the changes to packages.lock to continue using the package cache"'
        if: success() && steps.restore-dependencies.outcome == 'failure'

      - name: Build with dotnet
        run: dotnet build --configuration Release --no-restore /p:BuildAndroid=true /p:BuildiOS=true /p:BuildWindows=true Chatdown.sln

      - name: dotnet publish
        run: dotnet publish Chatdown.Web/Chatdown.Web.csproj -c Release -o "Chatdown.Web.Publish" 

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: Chatdown.Web.Publish

      - name: Upload artifact for test job
        uses: actions/upload-artifact@v4
        with:
          name: .test-app
          path: Chatdown.Tests

  test:
    runs-on: windows-latest
    needs: build
    if: success() # Only run if the build job was successful
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .test-app
          path: Chatdown

      - name: Run tests
        run: |
          cd Chatdown
          dotnet test Chatdown.Tests.csproj --configuration Release

  deploy:
    runs-on: windows-latest
    needs: test
    if: success() # Only run if the test job was successful
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_16CE607087AB4B4F96336250E52C05B8 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_634DAC9500A346039124C5320417EEBE }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_0809B0DEA5D742A3BE01EE7321713D8E }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'chatdown'
          slot-name: 'Production'
          package: .
